import { app, BrowserWindow, ipcMain, dialog, Notification } from "electron";
import fs from "fs";
import path from "path";
import {
  getFolderSize,
  getAllFolders,
  exploreDirectory,
  watchDirectory,
  sendSavedDirectory,
  getMainDirectoryPath,
  getFileMetadata,
} from "./lib/file-utils";
import { IPC_CHANNELS } from "./shared/ipc-constants";
import { llmRequest, visionModelRequest, ollamaRequest } from "./lib/ollama";
import { useDataExtractorTool } from "./lib/tools";
import { LanceVectorDB } from "./lib/vector-db";
import { logger } from "./lib/logger";
import { searchVectorsChain } from "./lib/chains/search-index";
import { VECTORDB_TABLE_NAME } from "./shared/config";
import { initSearchHandle } from "./ipc-handlers/search-vector-tb";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

// Function to create the main application window
const createWindow = async () => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  initSearchHandle();
  // Show your saved directory in renderer
  sendSavedDirectory(mainWindow);
};

// IPC handler for opening file dialog
ipcMain.handle(IPC_CHANNELS.OPEN_FILE_DIALOG, async () => {
  try {
    const result = await dialog.showOpenDialog({
      properties: ["openDirectory"],
    });
    if (!result.canceled && result.filePaths.length > 0) {
      const selectedPath = result.filePaths[0];
      await fs.promises.writeFile(
        path.join(app.getPath("userData"), "config.json"),
        JSON.stringify({ mainDir: selectedPath })
      );
      watchDirectory(selectedPath);
      return selectedPath;
    }
    return null;
  } catch (error) {
    console.error("Failed to open file dialog:", error);
    throw error;
  }
});

// IPC handler for getting directory structure
ipcMain.handle(
  IPC_CHANNELS.GET_DIRECTORY_STRUCTURE,
  async (event, dir: string) => {
    return exploreDirectory(dir);
  }
);

// IPC handler for handling dropped files
ipcMain.on(IPC_CHANNELS.HANDLE_DROPPED_FILES, (event, filePaths: string[]) => {
  logger.info(`Files dropped: ${filePaths.join(", ")}`);
});

// IPC handler for moving a file
ipcMain.handle(
  IPC_CHANNELS.MOVE_FILE,
  async (event, sourceFilePath: string, newPath: string) => {
    const mainFolderPath = await getMainDirectoryPath();
    if (!mainFolderPath) throw new Error("Main directory path is not defined");

    const targetDir = path.join(mainFolderPath, newPath);
    logger.info(`MOVE FILE :::::: ${sourceFilePath} to ${targetDir}`);

    if (!fs.existsSync(targetDir)) {
      fs.mkdirSync(targetDir, { recursive: true });
    }

    const fileName = path.basename(sourceFilePath);
    const newFilePath = path.join(targetDir, fileName);

    try {
      await fs.promises.rename(sourceFilePath, newFilePath);
      logger.info(
        `Successfully moved file from ${sourceFilePath} to ${newFilePath}`
      );
      return `Moved from ${sourceFilePath} to ${newFilePath}`;
    } catch (error) {
      logger.error(
        `Failed to move file from ${sourceFilePath} to ${newFilePath}:`,
        error
      );
      throw new Error(`Failed to move file: ${error.message}`);
    }
  }
);

// IPC handler for processing dropped items
ipcMain.handle(
  IPC_CHANNELS.PROCESS_DROPPED_ITEMS,
  async (event, items: string[]) => {
    const structure = await Promise.all(
      items.map((item) => exploreDirectory(item))
    );
    return structure;
  }
);

// IPC handler for performing API requests
// TODO: refactor for search
ipcMain.handle(
  IPC_CHANNELS.PERFORM_API_REQUEST,
  async (event, data: { filePath: string }) => {
    // File properties, metadata
    const fileMeta = await getFileMetadata(data.filePath);

    // Call our tool
    const textData = await useDataExtractorTool(
      data.filePath,
      fileMeta.mimeType
    );

    // Call chain
    const sV = await searchVectorsChain(fileMeta, textData);

    // Send notification with info
    const notify = new Notification({
      title: fileMeta.fileName + " indexed",
      body: textData,
    });
    notify.show();

    console.log(textData);
  }
);

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
