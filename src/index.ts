import { app, BrowserWindow, ipcMain, Notification } from "electron";

import {
  sendSavedDirectory,
  getFileMetadata,
} from "./lib/file-utils";
import { IPC_CHANNELS } from "./shared/ipc-constants";

import { useDataExtractorTool } from "./lib/tools";

import { logger } from "./lib/logger";
import { llmIndexMetadataChain } from "./lib/chains/index-metadata";

import { initSearchHandle } from "./ipc-handlers/search-vector-tb";
import { initFilesHandle } from "./ipc-handlers/files-handle";
import { initSearchFuseDbHandle } from "./ipc-handlers/search-fuse-db";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

// Function to create the main application window
const createWindow = async () => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  initSearchHandle();
  initSearchFuseDbHandle();
  initFilesHandle();
  // Show your saved directory in renderer
  sendSavedDirectory(mainWindow);
};


// IPC handler for performing API requests
// TODO: refactor for search
ipcMain.handle(
  IPC_CHANNELS.PERFORM_API_REQUEST,
  async (event, data: { filePath: string }) => {
    // File properties, metadata
    const fileMeta = await getFileMetadata(data.filePath);

    // Call our tool
    const textData = await useDataExtractorTool(
      data.filePath,
      fileMeta.mimeType
    );

    // Call chain
    const sV = await llmIndexMetadataChain(fileMeta, textData);

    // Send notification with info
    const notify = new Notification({
      title: fileMeta.fileName + " indexed",
      body: textData,
    });
    notify.show();

    console.log(textData);
  }
);

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
